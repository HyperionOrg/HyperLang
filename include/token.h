/*
 * Copyright (c) 2020-2021, SkillerRaptor <skillerraptor@protonmail.com>
 *
 * SPDX-License-Identifier: MIT
 */

#ifndef HYPERLANG_TOKEN_H_
#define HYPERLANG_TOKEN_H_

enum
{
	TOKEN_TYPE_EOF,

	TOKEN_TYPE_PLUS,
	TOKEN_TYPE_MINUS,
	TOKEN_TYPE_STAR,
	TOKEN_TYPE_SLASH,

	TOKEN_TYPE_EQUAL,
	TOKEN_TYPE_NOT_EQUAL,
	TOKEN_TYPE_LESS_THAN,
	TOKEN_TYPE_GREATER_THAN,
	TOKEN_TYPE_LESS_EQUAL,
	TOKEN_TYPE_GREATER_EQUAL,

	TOKEN_TYPE_ARROW_LEFT,
	TOKEN_TYPE_ARROW_RIGHT,

	TOKEN_TYPE_SEMICOLON,
	TOKEN_TYPE_ASSIGN,
	TOKEN_TYPE_IDENTIFIER,

	TOKEN_TYPE_LEFT_BRACE,
	TOKEN_TYPE_RIGHT_BRACE,
	TOKEN_TYPE_LEFT_PARENTHESIS,
	TOKEN_TYPE_RIGHT_PARENTHESIS,

	TOKEN_TYPE_FUNCTION,
	TOKEN_TYPE_VIRTUAL,
	TOKEN_TYPE_OVERRIDE,

	TOKEN_TYPE_IF,
	TOKEN_TYPE_ELSE,
	TOKEN_TYPE_DO,
	TOKEN_TYPE_WHILE,
	TOKEN_TYPE_FOR,
	TOKEN_TYPE_OF,
	TOKEN_TYPE_RETURN,

	TOKEN_TYPE_BREAK,
	TOKEN_TYPE_BREAKALL,
	TOKEN_TYPE_CONTINUE,

	TOKEN_TYPE_IMPORT,
	TOKEN_TYPE_EXPORT,

	TOKEN_TYPE_PACKAGE,
	TOKEN_TYPE_MUTABLE,
	TOKEN_TYPE_ENUM,
	TOKEN_TYPE_UNION,
	TOKEN_TYPE_STRUCT,

	TOKEN_TYPE_VOID,
	TOKEN_TYPE_BOOL,
	TOKEN_TYPE_FLOAT,
	TOKEN_TYPE_DOUBLE,
	TOKEN_TYPE_INT,
	TOKEN_TYPE_INT8,
	TOKEN_TYPE_INT16,
	TOKEN_TYPE_INT32,
	TOKEN_TYPE_INT64,
	TOKEN_TYPE_UINT,
	TOKEN_TYPE_UINT8,
	TOKEN_TYPE_UINT16,
	TOKEN_TYPE_UINT32,
	TOKEN_TYPE_UINT64,
	TOKEN_TYPE_STRING,
	TOKEN_TYPE_INT_LITERAL,
};

struct token
{
	int type;

	union
	{
		int int_value;
	} value;
};

#endif // HYPERLANG_TOKEN_H_
