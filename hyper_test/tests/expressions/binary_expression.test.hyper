/*
 * Copyright (c) 2020-present, SkillerRaptor <skillerraptor@protonmail.com>
 *
 * SPDX-License-Identifier: MIT
 */

function main() -> int32
{
	let variable_001: int8 = 0 as int8 + 0 as int8;
	let variable_002: int8 = 1 as int8 + 1 as int8;
	let variable_003: int8 = -1 as int8 + -1 as int8;
	let variable_004: int8 = 0 as int8 - 0 as int8;
	let variable_005: int8 = 1 as int8 - 1 as int8;
	let variable_006: int8 = -1 as int8 - -1 as int8;
	let variable_007: int8 = 0 as int8 * 0 as int8;
	let variable_008: int8 = 1 as int8 * 1 as int8;
	let variable_009: int8 = -1 as int8 * -1 as int8;
	let variable_010: int8 = 1 as int8 / 1 as int8;
	let variable_011: int8 = -1 as int8 / -1 as int8;
	let variable_012: int8 = 1 as int8 % 1 as int8;
	let variable_013: int8 = -1 as int8 % -1 as int8;

	let variable_014: int16 = 0 as int16 + 0 as int16;
	let variable_015: int16 = 1 as int16 + 1 as int16;
	let variable_016: int16 = -1 as int16 + -1 as int16;
	let variable_017: int16 = 0 as int16 - 0 as int16;
	let variable_018: int16 = 1 as int16 - 1 as int16;
	let variable_019: int16 = -1 as int16 - -1 as int16;
	let variable_020: int16 = 0 as int16 * 0 as int16;
	let variable_021: int16 = 1 as int16 * 1 as int16;
	let variable_022: int16 = -1 as int16 * -1 as int16;
	let variable_023: int16 = 1 as int16 / 1 as int16;
	let variable_024: int16 = -1 as int16 / -1 as int16;
	let variable_025: int16 = 1 as int16 % 1 as int16;
	let variable_026: int16 = -1 as int16 % -1 as int16;
	
	let variable_027: int32 = 0 as int32 + 0 as int32;
	let variable_028: int32 = 1 as int32 + 1 as int32;
	let variable_029: int32 = -1 as int32 + -1 as int32;
	let variable_030: int32 = 0 as int32 - 0 as int32;
	let variable_031: int32 = 1 as int32 - 1 as int32;
	let variable_032: int32 = -1 as int32 - -1 as int32;
	let variable_033: int32 = 0 as int32 * 0 as int32;
	let variable_034: int32 = 1 as int32 * 1 as int32;
	let variable_035: int32 = -1 as int32 * -1 as int32;
	let variable_036: int32 = 1 as int32 / 1 as int32;
	let variable_037: int32 = -1 as int32 / -1 as int32;
	let variable_038: int32 = 1 as int32 % 1 as int32;
	let variable_039: int32 = -1 as int32 % -1 as int32;
	
	let variable_040: int64 = 0 as int64 + 0 as int64;
	let variable_041: int64 = 1 as int64 + 1 as int64;
	let variable_042: int64 = -1 as int64 + -1 as int64;
	let variable_043: int64 = 0 as int64 - 0 as int64;
	let variable_044: int64 = 1 as int64 - 1 as int64;
	let variable_045: int64 = -1 as int64 - -1 as int64;
	let variable_046: int64 = 0 as int64 * 0 as int64;
	let variable_047: int64 = 1 as int64 * 1 as int64;
	let variable_048: int64 = -1 as int64 * -1 as int64;
	let variable_049: int64 = 1 as int64 / 1 as int64;
	let variable_050: int64 = -1 as int64 / -1 as int64;
	let variable_051: int64 = 1 as int64 % 1 as int64;
	let variable_052: int64 = -1 as int64 % -1 as int64;

	let variable_053: uint8 = 0 as uint8 + 0 as uint8;
	let variable_054: uint8 = 1 as uint8 + 1 as uint8;
	let variable_055: uint8 = 0 as uint8 - 0 as uint8;
	let variable_056: uint8 = 1 as uint8 - 1 as uint8;
	let variable_057: uint8 = 0 as uint8 * 0 as uint8;
	let variable_058: uint8 = 1 as uint8 * 1 as uint8;
	let variable_060: uint8 = 1 as uint8 / 1 as uint8;
	let variable_062: uint8 = 1 as uint8 % 1 as uint8;

	let variable_064: uint16 = 0 as uint16 + 0 as uint16;
	let variable_065: uint16 = 1 as uint16 + 1 as uint16;
	let variable_066: uint16 = 0 as uint16 - 0 as uint16;
	let variable_067: uint16 = 1 as uint16 - 1 as uint16;
	let variable_068: uint16 = 0 as uint16 * 0 as uint16;
	let variable_069: uint16 = 1 as uint16 * 1 as uint16;
	let variable_071: uint16 = 1 as uint16 / 1 as uint16;
	let variable_073: uint16 = 1 as uint16 % 1 as uint16;
	
	let variable_075: uint32 = 0 as uint32 + 0 as uint32;
	let variable_076: uint32 = 1 as uint32 + 1 as uint32;
	let variable_077: uint32 = 0 as uint32 - 0 as uint32;
	let variable_078: uint32 = 1 as uint32 - 1 as uint32;
	let variable_079: uint32 = 0 as uint32 * 0 as uint32;
	let variable_080: uint32 = 1 as uint32 * 1 as uint32;
	let variable_082: uint32 = 1 as uint32 / 1 as uint32;
	let variable_084: uint32 = 1 as uint32 % 1 as uint32;
	
	let variable_086: uint64 = 0 as uint64 + 0 as uint64;
	let variable_087: uint64 = 1 as uint64 + 1 as uint64;
	let variable_088: uint64 = 0 as uint64 - 0 as uint64;
	let variable_089: uint64 = 1 as uint64 - 1 as uint64;
	let variable_090: uint64 = 0 as uint64 * 0 as uint64;
	let variable_091: uint64 = 1 as uint64 * 1 as uint64;
	let variable_093: uint64 = 1 as uint64 / 1 as uint64;
	let variable_095: uint64 = 1 as uint64 % 1 as uint64;

	let variable_097: float32 = 0.0 as float32 + 0.0 as float32;
	let variable_098: float32 = 1.0 as float32 + 1.0 as float32;
	let variable_099: float32 = 0.0 as float32 - 0.0 as float32;
	let variable_100: float32 = 1.0 as float32 - 1.0 as float32;
	let variable_101: float32 = 0.0 as float32 * 0.0 as float32;
	let variable_102: float32 = 1.0 as float32 * 1.0 as float32;
	let variable_103: float32 = -1.0 as float32 * -1.0 as float32;
	let variable_105: float32 = 1.0 as float32 / 1.0 as float32;
	let variable_106: float32 = -1.0 as float32 / -1.0 as float32;

	let variable_107: float64 = 0.0 as float64 + 0.0 as float64;
	let variable_108: float64 = 1.0 as float64 + 1.0 as float64;
	let variable_109: float64 = 0.0 as float64 - 0.0 as float64;
	let variable_110: float64 = 1.0 as float64 - 1.0 as float64;
	let variable_111: float64 = 0.0 as float64 * 0.0 as float64;
	let variable_112: float64 = 1.0 as float64 * 1.0 as float64;
	let variable_113: float64 = -1.0 as float64 * -1.0 as float64;
	let variable_115: float64 = 1.0 as float64 / 1.0 as float64;
	let variable_116: float64 = -1.0 as float64 / -1.0 as float64;

	/*
	 * TODO: Add following test cases:
	 * - Bitwise And
	 * - Bitwise Or
	 * - Bitwise Xor
	 * - Left Shift
	 * - Right Shift
	 * - Logical And
	 * - Logical Or
	 * - Equal
	 * - Not Equal
	 * - Less Than
	 * - Greater Than
	 * - Less Equal
	 * - Greater Equal
	 */

	return 0;
}
