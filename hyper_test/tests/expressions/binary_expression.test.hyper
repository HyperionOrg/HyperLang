/*
 * Copyright (c) 2020-present, SkillerRaptor <skillerraptor@protonmail.com>
 *
 * SPDX-License-Identifier: MIT
 */

fn main() -> i32
{
	let variable_001: i8 = 0 as i8 + 0 as i8;
	let variable_002: i8 = 1 as i8 + 1 as i8;
	let variable_003: i8 = -1 as i8 + -1 as i8;
	let variable_004: i8 = 0 as i8 - 0 as i8;
	let variable_005: i8 = 1 as i8 - 1 as i8;
	let variable_006: i8 = -1 as i8 - -1 as i8;
	let variable_007: i8 = 0 as i8 * 0 as i8;
	let variable_008: i8 = 1 as i8 * 1 as i8;
	let variable_009: i8 = -1 as i8 * -1 as i8;
	let variable_010: i8 = 1 as i8 / 1 as i8;
	let variable_011: i8 = -1 as i8 / -1 as i8;
	let variable_012: i8 = 1 as i8 % 1 as i8;
	let variable_013: i8 = -1 as i8 % -1 as i8;

	let variable_014: i16 = 0 as i16 + 0 as i16;
	let variable_015: i16 = 1 as i16 + 1 as i16;
	let variable_016: i16 = -1 as i16 + -1 as i16;
	let variable_017: i16 = 0 as i16 - 0 as i16;
	let variable_018: i16 = 1 as i16 - 1 as i16;
	let variable_019: i16 = -1 as i16 - -1 as i16;
	let variable_020: i16 = 0 as i16 * 0 as i16;
	let variable_021: i16 = 1 as i16 * 1 as i16;
	let variable_022: i16 = -1 as i16 * -1 as i16;
	let variable_023: i16 = 1 as i16 / 1 as i16;
	let variable_024: i16 = -1 as i16 / -1 as i16;
	let variable_025: i16 = 1 as i16 % 1 as i16;
	let variable_026: i16 = -1 as i16 % -1 as i16;
	
	let variable_027: i32 = 0 as i32 + 0 as i32;
	let variable_028: i32 = 1 as i32 + 1 as i32;
	let variable_029: i32 = -1 as i32 + -1 as i32;
	let variable_030: i32 = 0 as i32 - 0 as i32;
	let variable_031: i32 = 1 as i32 - 1 as i32;
	let variable_032: i32 = -1 as i32 - -1 as i32;
	let variable_033: i32 = 0 as i32 * 0 as i32;
	let variable_034: i32 = 1 as i32 * 1 as i32;
	let variable_035: i32 = -1 as i32 * -1 as i32;
	let variable_036: i32 = 1 as i32 / 1 as i32;
	let variable_037: i32 = -1 as i32 / -1 as i32;
	let variable_038: i32 = 1 as i32 % 1 as i32;
	let variable_039: i32 = -1 as i32 % -1 as i32;
	
	let variable_040: i64 = 0 as i64 + 0 as i64;
	let variable_041: i64 = 1 as i64 + 1 as i64;
	let variable_042: i64 = -1 as i64 + -1 as i64;
	let variable_043: i64 = 0 as i64 - 0 as i64;
	let variable_044: i64 = 1 as i64 - 1 as i64;
	let variable_045: i64 = -1 as i64 - -1 as i64;
	let variable_046: i64 = 0 as i64 * 0 as i64;
	let variable_047: i64 = 1 as i64 * 1 as i64;
	let variable_048: i64 = -1 as i64 * -1 as i64;
	let variable_049: i64 = 1 as i64 / 1 as i64;
	let variable_050: i64 = -1 as i64 / -1 as i64;
	let variable_051: i64 = 1 as i64 % 1 as i64;
	let variable_052: i64 = -1 as i64 % -1 as i64;

	let variable_053: u8 = 0 as u8 + 0 as u8;
	let variable_054: u8 = 1 as u8 + 1 as u8;
	let variable_055: u8 = 0 as u8 - 0 as u8;
	let variable_056: u8 = 1 as u8 - 1 as u8;
	let variable_057: u8 = 0 as u8 * 0 as u8;
	let variable_058: u8 = 1 as u8 * 1 as u8;
	let variable_060: u8 = 1 as u8 / 1 as u8;
	let variable_062: u8 = 1 as u8 % 1 as u8;

	let variable_064: u16 = 0 as u16 + 0 as u16;
	let variable_065: u16 = 1 as u16 + 1 as u16;
	let variable_066: u16 = 0 as u16 - 0 as u16;
	let variable_067: u16 = 1 as u16 - 1 as u16;
	let variable_068: u16 = 0 as u16 * 0 as u16;
	let variable_069: u16 = 1 as u16 * 1 as u16;
	let variable_071: u16 = 1 as u16 / 1 as u16;
	let variable_073: u16 = 1 as u16 % 1 as u16;
	
	let variable_075: u32 = 0 as u32 + 0 as u32;
	let variable_076: u32 = 1 as u32 + 1 as u32;
	let variable_077: u32 = 0 as u32 - 0 as u32;
	let variable_078: u32 = 1 as u32 - 1 as u32;
	let variable_079: u32 = 0 as u32 * 0 as u32;
	let variable_080: u32 = 1 as u32 * 1 as u32;
	let variable_082: u32 = 1 as u32 / 1 as u32;
	let variable_084: u32 = 1 as u32 % 1 as u32;
	
	let variable_086: u64 = 0 as u64 + 0 as u64;
	let variable_087: u64 = 1 as u64 + 1 as u64;
	let variable_088: u64 = 0 as u64 - 0 as u64;
	let variable_089: u64 = 1 as u64 - 1 as u64;
	let variable_090: u64 = 0 as u64 * 0 as u64;
	let variable_091: u64 = 1 as u64 * 1 as u64;
	let variable_093: u64 = 1 as u64 / 1 as u64;
	let variable_095: u64 = 1 as u64 % 1 as u64;

	let variable_097: f32 = 0.0 as f32 + 0.0 as f32;
	let variable_098: f32 = 1.0 as f32 + 1.0 as f32;
	let variable_099: f32 = 0.0 as f32 - 0.0 as f32;
	let variable_100: f32 = 1.0 as f32 - 1.0 as f32;
	let variable_101: f32 = 0.0 as f32 * 0.0 as f32;
	let variable_102: f32 = 1.0 as f32 * 1.0 as f32;
	let variable_103: f32 = -1.0 as f32 * -1.0 as f32;
	let variable_105: f32 = 1.0 as f32 / 1.0 as f32;
	let variable_106: f32 = -1.0 as f32 / -1.0 as f32;

	let variable_107: f64 = 0.0 as f64 + 0.0 as f64;
	let variable_108: f64 = 1.0 as f64 + 1.0 as f64;
	let variable_109: f64 = 0.0 as f64 - 0.0 as f64;
	let variable_110: f64 = 1.0 as f64 - 1.0 as f64;
	let variable_111: f64 = 0.0 as f64 * 0.0 as f64;
	let variable_112: f64 = 1.0 as f64 * 1.0 as f64;
	let variable_113: f64 = -1.0 as f64 * -1.0 as f64;
	let variable_115: f64 = 1.0 as f64 / 1.0 as f64;
	let variable_116: f64 = -1.0 as f64 / -1.0 as f64;

	/*
	 * TODO: Add following test cases:
	 * - Bitwise And
	 * - Bitwise Or
	 * - Bitwise Xor
	 * - Left Shift
	 * - Right Shift
	 * - Logical And
	 * - Logical Or
	 * - Equal
	 * - Not Equal
	 * - Less Than
	 * - Greater Than
	 * - Less Equal
	 * - Greater Equal
	 */

	return 0;
}
