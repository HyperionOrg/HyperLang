name: build-windows

on: [ push, pull_request ]

jobs:
  build-windows:
    runs-on: windows-2022
    timeout-minutes: 600
    defaults:
      run:
        shell: cmd
    env:
      llvm_path: "C:\\llvm-project"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows MSVC Debug",
            artifact: "windows-msvc-debug.zip",
            cc: "cl",
            cxx: "cl",
            cmake_build_options: "--config Debug",
            cmake_configure_options: '-G "Visual Studio 17 2022" -A x64 -T host=x64',
            build_type: "Debug"
          }
          - {
            name: "Windows MSVC Release",
            artifact: "windows-msvc-release.zip",
            cc: "cl",
            cxx: "cl",
            cmake_build_options: "--config Release",
            cmake_configure_options: '-G "Visual Studio 17 2022" -A x64 -T host=x64',
            build_type: "Release"
          }
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache
        uses: actions/cache@v2
        id: llvm-build-cache
        with:
          path: |
            ${{ env.llvm_path }}
            !${{ env.llvm_path }}\\.git
            !${{ env.llvm_path }}\\.github
          key: ${{ runner.os }}-${{ matrix.config.build_type }}-${{ hashFiles('.github/workflows/build-windows.yml') }}

      - name: Cloning LLVM
        if: steps.llvm-build-cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/llvm/llvm-project/ ${{ env.llvm_path }} --branch llvmorg-13.0.0 --single-branch --depth=1

      - name: Configuring LLVM
        working-directory: ${{ env.llvm_path }}
        if: steps.llvm-build-cache.outputs.cache-hit != 'true'
        run: |
          cmake -S llvm -B build -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -D LLVM_PARALLEL_LINK_JOBS=1 -D LLVM_BUILD_TOOLS=OFF -D LLVM_ENABLE_ASSERTIONS=OFF -D LLVM_ENABLE_DIA_SDK=OFF -D LLVM_INCLUDE_BENCHMARKS=OFF -D LLVM_INCLUDE_EXAMPLES=OFF -D LLVM_INCLUDE_TESTS=OFF -D LLVM_INCLUDE_TOOLS=OFF -D LLVM_ENABLE_PROJECTS="llvm;lld" -D LLVM_TARGETS_TO_BUILD="X86" ${{ matrix.config.cmake_configure_options }}

      - name: Building LLVM
        working-directory: ${{ env.llvm_path }}
        if: steps.llvm-build-cache.outputs.cache-hit != 'true'
        run: |
          cmake --build build --target ALL_BUILD ${{ matrix.config.cmake_build_options }}

      - name: Installing LLVM
        working-directory: ${{ env.llvm_path }}
        run: |
          cmake --build build --target INSTALL ${{ matrix.config.cmake_build_options }}

      - name: Configure CMake
        run: |
          set CC=${{ matrix.config.cc }}
          set CXX=${{ matrix.config.cxx }}

          cmake -S . -B build ${{ matrix.config.cmake_configure_options }}

      - name: Build
        run: |
          cmake --build build ${{ matrix.config.cmake_build_options }}

      - name: Prepare upload
        run: |
          7z a -tzip ${{ matrix.config.artifact }} build/*

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}
