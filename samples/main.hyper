/*
 * Copyright (c) 2020-2021, SkillerRaptor <skillerraptor@protonmail.com>
 *
 * SPDX-License-Identifier: MIT
 */

import sys.io;
import sys.memory;
import sys.string;
import sys.vector;

union data_union
{
    a: uint32,
    (
        b: uint16,
        c: uint16
    )
}

enum data_state
{
    idle,
    walking,
    running,
}

struct vector2<T>
{
    union
    {
        (
            x: T,
            y: T
        ),
        (
            u: T,
            v: T
        )
    }
}

export struct data_object
{
    sys.string name;
    data_state state;
    vector2<float> position;
}

export function data_object.to_string() -> sys.string
{
    return name;
}

function print_string(string: sys.string) -> void
{
    sys.print(string);
}

function add(x: const int32, y: const int32) -> int32
{
    return x + y;
}

function main() -> int32
{
    x: const int32 = 10;
    y: const int32 = 11;

    if (x < y)
    {
        z: const int32 = add(10, 11);
        print_string(z.to_string()); // >>> 21
    }

    ptr: const uint64* = sys.allocate<const uint64*>(1);
    *ptr = 5;
    sys.deallocate(ptr);

    ref: const int32& = x;
    print_string(ref.to_string());

    vector: sys.vector<sys.string> = ();
    vector.push("First");
    vector.push("Second");

    print_string(vector.to_string()); // >>> ["First", "Second"]

    for (string: sys.string of vector)
    {
        print_string(string);
    }

    for (i: int32 = 0; i < 10; ++i)
    {
        print_string(i.to_string());
    }
    
    for (i: int32 = 0; i < 10; ++i)
    {
        for (j: int32 = 0; j < 10; ++j)
        {
            if (j == 0)
            {
                continue;
            }

            breakall;
        }
    }

    while (true)
    {
        break;
    }

    return 0;
}